/** * This class simulates the Memory * Memory is assumed 2-D array containing 20 banks of 8192 words * First index of the Memory array delegates the address value * Second index of the Memory array holds 20-bit content * It has 2 methods.*/package simulator;public class Memory {        public int[][] MEMORYBank0, MEMORYBank1, MEMORYBank2, MEMORYBank3;    public int[][] MEMORYBank4, MEMORYBank5, MEMORYBank6, MEMORYBank7;    private Cache L1Cache;           public Memory() {            //MEMORY = new int[2048][20];        MEMORYBank0 = new int[255][20];        MEMORYBank1 = new int[255][20];        MEMORYBank2 = new int[255][20];        MEMORYBank3 = new int[255][20];        MEMORYBank4 = new int[255][20];        MEMORYBank5 = new int[255][20];        MEMORYBank6 = new int[255][20];        MEMORYBank7 = new int[255][20];                // create 16 blocks-size a sub-level cache for the Memory        L1Cache = new Cache(16);                }        /**     * This method returns the content of Memory at the asked address     * if available from the Cache, otherwise Read-Miss happens     * Address value is taken as string of 0s and 1s but in order to fetch      * from memory it is read bit by bit     * @param strAddr The address of Memory whose content is needed      * @return the content as string. Since content is stored as 20 bits in the Memory     * it is merged and returned as a whole      */    public String get(String strAddr) {                  String s = "";                  s = L1Cache.Read(Integer.parseInt(strAddr, 2));                  return s;     }         /**     * This method returns the content of Memory at the asked address     * directly from the memory     * It is used by cache if Read-Miss happens      * Address value is taken as string of 0s and 1s but in order to fetch      * from memory it is read bit by bit     * @param strAddr The address of Memory whose content is needed      * @return the content as string. Since content is stored as 20 bits in the Memory     * it is merged and returned as a whole      */    public String getDirect(String ADDR) {                  String DATA = "", BankNumber="";         int OffSet=0;                  ADDR = (ADDR.length()!=11) ? String.format("%0"+ (11-ADDR.length())+ "d", 0)+ ADDR : ADDR;                  BankNumber = ADDR.substring(ADDR.length()-3, ADDR.length());         OffSet = Integer.parseInt(ADDR.substring(0, ADDR.length()-3),2);                  switch (BankNumber) {             case "000":                 DATA = getDataFromBank(MEMORYBank0, OffSet);                 break;              case "001":                 DATA = getDataFromBank(MEMORYBank1, OffSet);                 break;              case "010":                 DATA = getDataFromBank(MEMORYBank2, OffSet);                 break;              case "011":                 DATA = getDataFromBank(MEMORYBank3, OffSet);                 break;                   case "100":                 DATA = getDataFromBank(MEMORYBank4, OffSet);                 break;              case "101":                 DATA = getDataFromBank(MEMORYBank5, OffSet);                 break;              case "110":                 DATA = getDataFromBank(MEMORYBank6, OffSet);                 break;                  case "111":                 DATA = getDataFromBank(MEMORYBank7, OffSet);                 break;           }                      return DATA;     }        public String getDataFromBank(int [][] Bank, int OffSet) {                 String s = "";                for(int i=0;i<20;i++) {           s += Bank[OffSet][i];         }            return s;    }        /**     * This method saves a content in the Memory address      * @param strValue The content which will be saved in the Memory.     * This value is taken as string of 0s and 1s but it is saved bit by bit     * @param strAddr The content is saved in this address in the Memory array     */    public void set(String strValue, String strAddr) {                 strValue = (strValue.length()!=20) ? String.format("%0"+ (20-strValue.length())+ "d", 0)+strValue : strValue;                     L1Cache.Write(strValue, Integer.parseInt(strAddr, 2));                           }        /**     * This method saves a content in the Memory address      * @param DATA The content which will be saved in the Memory.     * This value is taken as string of 0s and 1s but it is saved bit by bit     * @param ADDR The content is saved in this address in the Memory array     */    public void setDirect(String DATA, String ADDR) {               DATA = (DATA.length()!=20) ? String.format("%0"+ (20-DATA.length())+ "d", 0)+ DATA : DATA;                  String BankNumber="";         int OffSet;         BankNumber = ADDR.substring(ADDR.length()-3, ADDR.length());         OffSet = Integer.parseInt(ADDR.substring(0, ADDR.length()-3),2);                  switch (BankNumber) {             case "000":                 setDataToBank(MEMORYBank0, OffSet, DATA);                 break;              case "001":                 setDataToBank(MEMORYBank1, OffSet, DATA);                 break;              case "010":                 setDataToBank(MEMORYBank2, OffSet, DATA);                 break;              case "011":                 setDataToBank(MEMORYBank3, OffSet, DATA);                 break;                   case "100":                 setDataToBank(MEMORYBank4, OffSet, DATA);                 break;              case "101":                 setDataToBank(MEMORYBank5, OffSet, DATA);                 break;              case "110":                 setDataToBank(MEMORYBank6, OffSet, DATA);                 break;                  case "111":                 setDataToBank(MEMORYBank7, OffSet, DATA);                 break;           }              //   ControlPanel.jMessages.append("MEMORY(" + Integer.parseInt(ADDR,2) + ") --> " + Integer.parseInt(DATA,2) + "\n");           }        public void setDataToBank(int [][] Bank, int OffSet, String DATA) {                              for(int i=0;i<20;i++) {             Bank[OffSet][i] = Integer.parseInt(Character.toString(DATA.charAt(i)));         }            }                   }